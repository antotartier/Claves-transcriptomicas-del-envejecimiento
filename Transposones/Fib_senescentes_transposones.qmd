---
title: "Transposones en fibroblastos sensecentes"
author: "Antonio García-Bernardo Tartiere"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Linux

Mapeamos el genoma

``` bash
runSTAR(){
    name=$(basename $1 | sed 's/_1.fq.gz//')
    bname=$(basename $1 | sed 's/_ZKRN.*//')
    STAR --runThreadN 20 --clip3pNbases 0 --outFilterMultimapNmax 100 --winAnchorMultimapNmax 100 --alignEndsType EndToEnd --alignEndsProtrude 100 DiscordantPair --outFilterScoreMinOverLread 0.4 -outFilterMatchNminOverLread 0.4 --chimSegmentMin 150 --genomeDir /home/antotartier/data/genomes/GRCh38.Temprano/STAR_index --readFilesIn /home/antotartier/data/X204SC23064156-Z01-F001/01.RawData/${name}_1.fq.gz /home/antotartier/data/X204SC23064156-Z01-F001/01.RawData/${name}_2.fq.gz --outSAMtype BAM  SortedByCoordinate --outSAMattributes NH HI AS nM NM MD jM jI MC ch --outSAMstrandField intronMotif --outSAMattrIHstart 0 --sjdbGTFfile /home/antotartier/data/genomes/GRCh38.Temprano/gencode.v44.primary_assembly.annotation.gtf --sjdbOverhang 100 --twopassMode Basic --readFilesCommand zcat --outFileNamePrefix /home/antotartier/data/transposones/fibrob_senescentes/mapping/${bname}
}

export -f runSTAR

nice -15 parallel -j 1 --progress runSTAR ::: /home/antotartier/data/X204SC23064156-Z01-F001/01.RawData/*_1.fq.gz
```

ejecutamos TEcount a partir de los BAM

``` bash
source ~/miniforge3/etc/profile.d/conda.sh 
conda activate TETranscripts
myTEcount(){
    bname=$(basename $1 | sed 's/_ZKRN.*//')
    TEcount -b $1 \
    --GTF /home/antotartier/data/genomes/gencode/GRCh38.Temprano/gencode.v44.primary_assembly.annotation.gtf \
    --TE /home/antotartier/data/transposones/fibrob_senescentes/TEtranscripts/GRCh38_GENCODE_rmsk_TE.gtf \
    --stranded reverse \
    --sortByPos \
    --project $bname \
    --outdir /home/antotartier/data/transposones/fibrob_senescentes/TEtranscripts/TE_count_all \
    --verbose 2>/home/antotartier/data/transposones/fibrob_senescentes/TEtranscripts/TE_count_all/log_TE_${bname}.txt
}
export -f myTEcount
parallel -j 4 myTEcount ::: /home/antotartier/data/transposones/fibrob_senescentes/TEtranscripts/STAR_map/BAM_sorted/*out_sorted.bam
```

## Análisis a nivel de subfamilia

cargamos las librerias necesarias

```{r}
library(DESeq2)
library(RColorBrewer)
library(ggplot2)
library(ggrepel)
library(EnhancedVolcano)
library(ggpubr)
library(openxlsx)
library(readr)
library(tidyr)
library(rtracklayer)
library(clusterProfiler)
library(forcats)
library(fgsea)
library(gridExtra)
```

### DESeq2

definimos las variables que utilizaremos más adelante

```{r}
out_path<-"~/data/transposones/fibrob_senescentes/TEtranscripts/DESeq_fib_senescentes"
counts_path<- Sys.glob(paste("~/data/transposones/fibrob_senescentes/TEtranscripts/TEcount", "/*cntTable", sep = ""))
```

#### Análisis independiente de cada línea celular

generamos los input de la función DESeqDataSetFromMatrix

```{r}
#Fusionamos los archivos de count de todas las muestras
countData<-read_delim(counts_path, id = "sample", col_names = F, skip = 1,show_col_types = F)
countData<-pivot_wider(countData,names_from = sample, values_from = X2)
colnames(countData)<-c("gene_id", basename(colnames(countData[2:19])))
countData<-data.frame(countData, row.names = 1)

#Separamos los counts en función de la línea celular
countData_GM05565<-countData[,c(2,11:18)]
countData_GM00038<-countData[,c(1,3:10)]

#generamos el coldata de cada una de las líneas celulares
sample_info<-read.xlsx("~/data/transposones/fibrob_senescentes/TEtranscripts/DESeq_fib_senescentes/sample_info.xlsx")
sample_info<-sample_info[sample_info$ID==c(1:9)|sample_info$ID==c(19:27),1:3]
sample_info$Passage<-mgsub(sample_info$Passage, c("p14","p20","p24","p21","p27","p34"), c("Temprano","Medio","Tardío","Temprano","Medio","Tardío"))
colnames(sample_info)[colnames(sample_info)=="Passage"]<-"Pase"
colData_GM05565<-data.frame(sample_info[1:9,3],row.names = colnames(countData_GM05565))
colnames(colData_GM05565)<-"Pase"
colData_GM00038<-data.frame(sample_info[10:18,3], row.names = colnames(countData_GM00038))
colnames(colData_GM00038)<-"Pase"
colData_GM05565$Pase<-factor(colData_GM05565$Pase)
colData_GM00038$Pase<-factor(colData_GM00038$Pase)



```

generamos el DESeqDataSet

```{r}
DESeqDataSet_GM05565<-DESeqDataSetFromMatrix(countData = countData_GM05565, colData = colData_GM05565, design = ~ Pase)
DESeqDataSet_GM00038<-DESeqDataSetFromMatrix(countData = countData_GM00038, colData = colData_GM00038, design = ~ Pase)
```

Eliminamos los genes con pocas lecturas

```{r}
smallestGroupSize <- 3

keep_GM05565 <- rowSums(counts(DESeqDataSet_GM05565) >= 10) >= smallestGroupSize
DESeqDataSet_GM05565 <- DESeqDataSet_GM05565[keep_GM05565,]
keep_GM00038 <- rowSums(counts(DESeqDataSet_GM00038) >= 10) >= smallestGroupSize
DESeqDataSet_GM00038 <- DESeqDataSet_GM00038[keep_GM00038,]
```

Ejecutamos la función DESeq

```{r}
DESeq_GM05565<-DESeq(DESeqDataSet_GM05565)
DESeq_GM00038<-DESeq(DESeqDataSet_GM00038)
```

Visualizamos las diferencias de expresión a nivel general mediante un PCA y una matriz de distancias

```{r}
vsd_GM05565 <- vst(DESeq_GM05565, blind=FALSE)
vsd_GM00038<- vst(DESeq_GM00038, blind = FALSE)

PCA_GM05565<-plotPCA(vsd_GM05565, intgroup=("Pase")) + labs(title="PCA GM05565", colour = "Pase")
PCA_GM00038<-plotPCA(vsd_GM00038, intgroup=("Pase")) + labs(title="PCA GM00038", colour = "Pase")

PCA_GM05565
PCA_GM00038


#creamos la matriz de distancias
sampleDists_GM05565 <- dist(t(assay(vsd_GM05565)))
sampleDistMatrix_GM05565 <- as.matrix(sampleDists_GM05565)
rownames(sampleDistMatrix_GM05565) <- vsd_GM05565$Pase
colnames(sampleDistMatrix_GM05565) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix_GM05565,
         clustering_distance_rows=sampleDists_GM05565,
         clustering_distance_cols=sampleDists_GM05565,
         col=colors, main = "Matriz de distancias GM05565") 

sampleDists_GM00038 <- dist(t(assay(vsd_GM00038)))
sampleDistMatrix_GM00038 <- as.matrix(sampleDists_GM00038)
rownames(sampleDistMatrix_GM00038) <- vsd_GM00038$Pase
colnames(sampleDistMatrix_GM00038) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix_GM00038,
         clustering_distance_rows=sampleDists_GM00038,
         clustering_distance_cols=sampleDists_GM00038,
         col=colors, main = "Matriz de distancias GM00038")

png(filename = paste0(out_path,"/PCA_indep.png"),height = 10000,width = 8000,res = 1100)
grid.arrange(PCA_GM00038,PCA_GM05565,ncol=1)
dev.off()

#hacemos un PCA de solo los transposones
vsd_GM00038_TE<-vsd_GM00038[grepl(":",rownames(vsd_GM00038)),]
vsd_GM05565_TE<-vsd_GM05565[grepl(":",rownames(vsd_GM05565)),]

PCA_GM05565_TE<-plotPCA(vsd_GM05565_TE, intgroup=("Pase")) + labs(title="PCA GM05565 TE", colour = "Pase") + theme(plot.title = element_text(hjust = 0.5))
PCA_GM00038_TE<-plotPCA(vsd_GM00038_TE, intgroup=("Pase")) + labs(title="PCA GM00038 TE", colour = "Pase") + theme(plot.title = element_text(hjust = 0.5))

PCA_GM05565_TE
PCA_GM00038_TE

png(filename = paste0(out_path,"/PCA_indep_TE.png"),height = 10000,width = 8000,res = 1100)
grid.arrange(PCA_GM00038_TE,PCA_GM05565_TE,ncol=1)
dev.off()
```

Ejecutamos los análisis comparativos

```{r}
res_GM05565_TempranovsMedio<-results(DESeq_GM05565, contrast = c("Pase","Medio","Temprano"))
res_GM05565_MediovsTardío<-results(DESeq_GM05565, contrast = c("Pase","Tardío","Medio"))
res_GM05565_TempranovsTardío<-results(DESeq_GM05565, contrast = c("Pase","Tardío","Temprano"))

res_GM00038_TempranovsMedio<-results(DESeq_GM00038, contrast = c("Pase","Medio","Temprano"))
res_GM00038_MediovsTardío<-results(DESeq_GM00038, contrast = c("Pase","Tardío","Medio"))
res_GM00038_TempranovsTardío<-results(DESeq_GM00038, contrast = c("Pase","Tardío","Temprano"))
```

Guardamos los resultados como csv2 y como objeto

```{r}
res_list<-list(GM05565_Temprano_vs_Medio=res_GM05565_TempranovsMedio,GM05565_Medio_vs_Tardío=res_GM05565_MediovsTardío,GM05565_Temprano_vs_Tardío=res_GM05565_TempranovsTardío,GM00038_Temprano_vs_Medio=res_GM00038_TempranovsMedio,GM00038_Medio_vs_Tardío=res_GM00038_MediovsTardío,GM00038_Temprano_vs_Tardío=res_GM00038_TempranovsTardío)
res_list_df<-lapply(res_list,as.data.frame)
res_indpt<-bind_rows(res_list_df,.id = "experiment")

write.csv2(res_indpt, paste0(out_path,"/DESeq_res_indpte.csv"),quote = F)
save(res_list_df,file = paste0(out_path,"/DESeq_res_indpte.obj"))
```

Nos quedamos con los transposones en cada uno de los experimentos

```{r}
get_TE<-function(x){
  TE<-x[grepl(":",rownames(x)),]
  return(TE)
}
TE_list<-lapply(res_list,get_TE)
```

Nos quedamos con los genes codificantes en cada uno de los experimentos

```{r}
get_codif<-function(x){
  cod<-x[!grepl(":",rownames(x)),]
  return(cod)
}
codif_list<-lapply(res_list,get_codif)
```

Análisis general de los resultados, comparando la expresión general con la de los transposones

```{r}
for (i in 1:6){
  print(paste(names(res_list[i]), "Genes codificantes",sep = " "))
  print(DESeq2:::summary.DESeqResults(res_list[[i]],alpha = 0.05))
  print(paste(names(TE_list[i]), "Transposones",sep = " "))
  print(DESeq2:::summary.DESeqResults(TE_list[[i]],alpha = 0.05))
}
```

Volcano Plots

```{r,fig.height=10,fig.width=10}
square_data <- function(x,maxVal,modeFC=T) {
  if(modeFC == T) {
    ifelse(x > maxVal,maxVal,x)
    ifelse(abs(x) > maxVal,-maxVal,x)
  }
  if(modeFC == F){
    ifelse(x < maxVal,maxVal,x)
  }
}


TE_squared<-list()
for (i in TE_list){
  TE<-as.data.frame(i)%>%
  mutate(log2FoldChange,aa = square_data(log2FoldChange,4,T)) %>%
  mutate(padj,padj = square_data(padj,1e-25,F))
  TE_squared<-append(TE_squared, list(TE))
}
names(TE_squared)<-names(TE_list)
TE_squared_df<-bind_rows(TE_squared, .id="experiment")


myVolcano<-function(data,biosig,sig,labsize,pointsize,axsize,legsize,axtextsize,topn){
  data <- as.data.frame(data) %>%
    mutate(Expresión = case_when(log2FoldChange >= biosig & padj <= sig ~ "Sobreexpresado",
                                 log2FoldChange <= -biosig & padj <= sig ~ "Infraexpresado",
                                 TRUE ~ "ns")) 
  # Ensure legend consistency
  data$Expresión <- factor(data$Expresión, levels = c("Sobreexpresado", "Infraexpresado", "ns"))
  data <- data %>%
    mutate(Expresión = fct_relevel(Expresión, "Sobreexpresado", "Infraexpresado"))
  #set axis limits
  maxLFC<-max(abs(data$log2FoldChange))
  #top genes
  top_up<-slice_max(data,n=topn,order_by = log2FoldChange)
  top_up<-top_up[top_up$log2FoldChange>1 & top_up$padj<0.05,]
  top_down<-slice_min(data,n=topn,order_by = log2FoldChange)
  top_down<-top_down[top_down$log2FoldChange<(-1) & top_down$padj<0.05,]
  top_genes<-rbind(top_up,top_down)
  #plot
  p<-ggplot(data = data,
         aes(x = log2FoldChange,
             y = -log10(padj))) + 
    geom_point(aes(colour = Expresión), 
               alpha = 0.2, 
               shape = 16,
               size = pointsize) + 
    geom_hline(yintercept = -log10(sig),
               linetype = "dashed") + 
    geom_vline(xintercept = c(-biosig, biosig),
               linetype = "dashed") +
    geom_label_repel(data = top_genes,     
                     aes(label = rownames(top_genes)),
                     force = 2,
                     nudge_y = 1,
                     max.overlaps = 4,
                     size=labsize) +
    scale_colour_manual(values = c("Sobreexpresado"="blue","Infraexpresado"="red","ns"="#3b3b3b")) + 
    scale_x_continuous(breaks = seq(round(-maxLFC),round(maxLFC),1),    
                       limits = c(-maxLFC,maxLFC))+
    theme(plot.title = element_text(hjust = 0.5),axis.title = element_text(size=axsize),axis.text = (element_text(size = axtextsize)),legend.title = element_blank(),legend.text = element_text(size=legsize),axis,legend.position = "top")
  return(p)
}

Volc_indep<-myVolcano(data = TE_squared_df,biosig = 1,sig = 0.05,labsize = 2,pointsize = 2,topn = 0,axsize = 10,legsize = 10,axtextsize = 10)+ facet_wrap(vars(factor(experiment, levels = c("GM05565_Temprano_vs_Medio","GM05565_Medio_vs_Tardío","GM05565_Temprano_vs_Tardío","GM00038_Temprano_vs_Medio","GM00038_Medio_vs_Tardío","GM00038_Temprano_vs_Tardío"))))

png(filename = paste0(out_path,"/Volc_indep.png"),height = 8000,width = 14000,res = 1100)
Volc_indep
dev.off()

ggsave(paste0(out_path,"/Volc_indep.pdf"),Volc_indep)
```

#### Análisis conjunto de ambas líneas celulares

Generamos el input de DESeqDataSetFromMatrix

```{r}
#Generamos el colData
colData<-sample_info[,2:3]
colnames(colData)[colnames(colData)=="Cells"]<-"Células"
numeric_part<-as.numeric(gsub("[^0-9]", "",counts_path))
colnames_cts<-counts_path[order(numeric_part)]
row.names(colData)<-basename(colnames_cts)
#Convertimos nuestras variables de inetrés en factores y determinamos el orden de los pases
colData$Células<-factor(colData$Células)
colData$Pase<-factor(colData$Pase,levels = c("Temprano","Medio","Tardío"))

#ordenamos las columnas del countData de forma que aparezcan en el mismo orden que las filas en el colData
countData=countData[,basename(colnames_cts)]
```

Generamos el DESeqDataSet

```{r}
DESeqDataSet<-DESeqDataSetFromMatrix(countData = countData, colData = colData, design= ~Células + Pase)
```

Eliminamos los genes con pocas lecturas

```{r}
smallestGroupSize <- 6

keep <- rowSums(counts(DESeqDataSet) >= 10) >= smallestGroupSize
DESeqDataSet <- DESeqDataSet[keep,]
```

Ejecutamos la función DESeq, usando el Likehood Ratio Test y el reduce para observar los cambios comunes a ambas líneas celulares en senescencia. Guardamos el resultado.

```{r}
DESeq<-DESeq(DESeqDataSet, test = "LRT", reduced=~Células)
save(DESeq,file = paste0(out_path,"/DESeq_conj.obj"))
```

Visualizamos las diferencias de expresión a nivel general mediante un PCA y una matriz de distancias

```{r}
vsd <- vst(DESeq, blind=FALSE)
save(vsd,file = paste0(out_path,"vsd_conj.obj"))

PCA_all<-plotPCA(vsd, intgroup=c("Pase","Células"),returnData =T) 
percentVar<- round(100 * attr(PCA_all, "percentVar"))
PCA_plot_all<-ggplot(PCA_all, aes(PC1, PC2, color=Pase, shape=Células))+geom_point(size=3)+
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance")) + 
  ggtitle("PCA senescencia replicativa") +
  coord_fixed()

PCA_plot_all

#creamos la matriz de distancias
sampleDists<- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$Células,vsd$Pase,sep = "-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
         clustering_distance_rows=sampleDists,
         clustering_distance_cols=sampleDists,
         col=colors, main = "Matriz de distancias")

png(filename = paste0(out_path,"/PCA_conj.png"),height = 8000,width = 14000,res = 1100)
PCA_plot_all
dev.off()

#hacemos el PCA solo de los transposones
vsd_TE<-vsd[grepl(":",rownames(vsd)),]
PCA_all_TE<-plotPCA(vsd_TE, intgroup=c("Pase","Células"),returnData =T) 
percentVar_TE<- round(100 * attr(PCA_all_TE, "percentVar"))
PCA_plot_all_TE<-ggplot(PCA_all_TE, aes(PC1, PC2, color=Pase, shape=Células))+
  geom_point(size=3)+
  xlab(paste0("PC1: ",percentVar_TE[1],"% Variabilidad")) +
  ylab(paste0("PC2: ",percentVar_TE[2],"% Variabilidad")) + 
  theme(legend.title = element_text(size = 20),legend.text = element_text(size=15))+
  coord_fixed()

PCA_plot_all_TE

png(filename = paste0(out_path,"/PCA_conj_TE.png"),height = 6000,width = 8000,res = 1100)
PCA_plot_all_TE
dev.off()

ggsave(paste0(out_path,"/PCA_conj_TE.pdf"),PCA_plot_all_TE)
```

Genereamos los resultados, que en este caso muestran los cambios en senescencia comunes a ambas líneas celulares

```{r}
res<-results(DESeq)
```

Guardamos los resultados

```{r}
write.csv2(res,file = paste0(out_path,"/DESeq_res_conj.csv"),quote = F)
save(res,file = paste0(out_path,"/DESeq_res_conj.obj"))
```

Nos quedamos con los transposones

```{r}
TE_only<-get_TE(res)
Codif<-get_codif(res)
```

Análisis general comparativo de la expresión de todos los genes y los transposones

```{r}
print("Genes codificantes")
DESeq2:::summary.DESeqResults(Codif,alpha = 0.05)
print("Transposones")
DESeq2:::summary.DESeqResults(TE_only,alpha = 0.05)
```

Volcano

```{r,fig.height=10,fig.width=10}
TE_only_sq<-as.data.frame(TE_only) %>%
  mutate(padj, padj=square_data(padj,1e-25,F)) %>%
  mutate(log2FoldChange, aa=square_data(log2FoldChange,4,T))

myVolcano<-function(data,biosig,sig,labsize,pointsize,axsize,legsize,axtextsize,topn){
  data <- as.data.frame(data) %>%
    mutate(Expresión = case_when(log2FoldChange >= biosig & padj <= sig ~ "Sobreexpresado",
                                 log2FoldChange <= -biosig & padj <= sig ~ "Infraexpresado",
                                 TRUE ~ "ns")) 
  # Ensure legend consistency
  data$Expresión <- factor(data$Expresión, levels = c("Sobreexpresado", "Infraexpresado", "ns"))
  data <- data %>%
    mutate(Expresión = fct_relevel(Expresión, "Sobreexpresado", "Infraexpresado"))
  #set axis limits
  maxLFC<-max(abs(data$log2FoldChange))
  #top genes
  top_up<-slice_max(data,n=topn,order_by = log2FoldChange)
  top_up<-top_up[top_up$log2FoldChange>1 & top_up$padj<0.05,]
  top_down<-slice_min(data,n=topn,order_by = log2FoldChange)
  top_down<-top_down[top_down$log2FoldChange<(-1) & top_down$padj<0.05,]
  top_genes<-rbind(top_up,top_down)
  #plot
  p<-ggplot(data = data,
         aes(x = log2FoldChange,
             y = -log10(padj))) + 
    geom_point(aes(colour = Expresión), 
               alpha = 0.2, 
               shape = 16,
               size = pointsize) + 
    geom_hline(yintercept = -log10(sig),
               linetype = "dashed") + 
    geom_vline(xintercept = c(-biosig, biosig),
               linetype = "dashed") +
    geom_label_repel(data = top_genes,     
                     aes(label = rownames(top_genes)),
                     force = 2,
                     nudge_y = 1,
                     max.overlaps = 4,
                     size=labsize) +
    scale_colour_manual(values = c("Sobreexpresado"="blue","Infraexpresado"="red","ns"="#3b3b3b")) + 
    scale_x_continuous(breaks = seq(round(-maxLFC),round(maxLFC),1),    
                       limits = c(-maxLFC,maxLFC))+
    theme(plot.title = element_text(hjust = 0.5),axis.title = element_text(size=axsize),axis.text = (element_text(size = axtextsize)),legend.title = element_blank(),legend.text = element_text(size=legsize),axis,legend.position = "top")
  return(p)
}

Volc_conj<-myVolcano(TE_only_sq,biosig = 1,sig = 0.05,labsize = 6,pointsize = 5,axsize = 25,legsize = 30,axtextsize = 20,topn = 10)

Volc_conj

png(filename = paste0(out_path,"/Volc_conj.png"),height = 10000,width = 11000,res = 1100)
Volc_conj
dev.off()

ggsave(paste0(out_path,"/Volc_conj.pdf"),Volc_conj,width =10,height = 10)
```

### GSEA

#### Análisis independiente de cada línea celular

Solo sale significativo en el experimento GM00038_TempranovsTardío.

```{r}
load(paste0(out_path,"/DESeq_res_indpte.obj"))
```

Generamos el rank y el term to gene

```{r}
#función que crea el rank a partir del df del resultado DESeq, se usa el pvalor en vez dle ajustado para evitar los empates y se suma el pvalor mínimo para evitar los infinitos
get_rank<-function(x){
  res_gsea<-x[x$baseMean>10,]#eliminamos genes con pocas lecturas
  res_gsea<-mutate(res_gsea,rank= -log10(pvalue+min(res_gsea$pvalue[res_gsea$pvalue!=0], na.rm= T))*sign(log2FoldChange))
  res_gsea<-na.omit(res_gsea)#eliminamos na y duplicados
  res_gsea<-distinct(res_gsea)
  res_gsea_vector<-res_gsea$rank
  names(res_gsea_vector)<-row.names(res_gsea)
  res_gsea_vector<-sort(res_gsea_vector, decreasing = T)
  return(res_gsea_vector)
}

#creamos el term to gene
rmsk <- "/data/genomes/GRCh38_gencode/GRCh38_GENCODE_rmsk_TE.gtf"
rmsk <- import(rmsk, format = "gtf")
term_to_gene<- data.frame(
  term = rmsk$family_id,
  gene_name = paste(rmsk$gene_id, rmsk$family_id, rmsk$class_id, sep = ":")
) %>%
  unique()#nos quedamos con los nombres únicos de los transposones

#genramos los rank 
rank_list <- lapply(res_list_df,get_rank)
```

Ejecutamos la función GSEA

```{r}
set.seed(10)#creamos una semilla para obtener siempre los mismos resultados

#creamos una función que intersecte el term to gene y el rank y después ejecute la función GSEA
GSEA_transp<-function(x){
  term_to_gene<-term_to_gene[term_to_gene$gene_name %in% names(x),]#solo los trsndposones con lecturas en el experimento
  GSEA<-GSEA(x,TERM2GENE = term_to_gene,seed=T,pvalueCutoff=1)
  return(GSEA)
}

GSEA_list<-lapply(rank_list,GSEA_transp)
#filtramos los resultados significativos
GSEA_list_signif<-lapply(GSEA_list,function(df) {
  filter(df, p.adjust < 0.05)
})
```

Hacemos las representaciones gráficas del experimento GM00038 pase temprano vs tardío pues es el único significativo

```{r}
GSEA_GM00038<-ggplot(data = as.data.frame(GSEA_list_signif$GM00038_Temprano_vs_Tardío), aes(x = NES, y = fct_reorder(ID,NES), fill = p.adjust)) + geom_bar(stat = "identity", color="black") + labs(title = "GSEA senescencia Temprano vs Tardío GM00038", x = "NES", y = "FAMILIAS",size=20) + scale_fill_gradient(low = "blue", high = "red",name = "P.ajustado")+theme(axis.text=element_text(size=12),axis.title=element_text(size=14,face="bold"), plot.title = element_text(size=16,hjust = 0.5))

Charlie<-gseaplot(GSEA_list_signif$GM00038_Temprano_vs_Tardío, geneSetID = 1, by = "runningScore", title = GSEA_list_signif$GM00038_Temprano_vs_Tardío[1])+xlab("Posición en el ranking de genes")
Alu<-gseaplot(GSEA_list_signif$GM00038_Temprano_vs_Tardío, geneSetID = 2, by = "runningScore", title = GSEA_list_signif$GM00038_Temprano_vs_Tardío[2])+xlab("Posición en el ranking de genes")
Tigger<-gseaplot(GSEA_list_signif$GM00038_Temprano_vs_Tardío, geneSetID = 3, by = "runningScore", title = GSEA_list_signif$GM00038_Temprano_vs_Tardío[3])+xlab("Posición en el ranking de genes")

png(filename = paste0(out_path,"/GSEA_GM00038.png"),height = 10000,width = 14000,res = 1100)
grid.arrange(GSEA_GM00038,Charlie,Tigger,Alu,ncol=2)
dev.off()
```

#### Análisis conjunto de ambas líneas celulares

Cargamos los resultados de DESeq

```{r}
load(paste0(out_path,"/DESeq_res_conj.obj"))
```

Generamos el rank

```{r}
#generamos el rank
res_df<-as.data.frame(res)
rank<-get_rank(res_df)
```

Ejecutamos la función GSEA

```{r}
set.seed(10)#evita que cambien los resultados
GSEA_conj<-GSEA_transp(rank)
```

No hay resultados estadísticamente siginificaticos

```{r}
GSEA_conj_sig<-GSEA_conj[GSEA_conj$p.adjust<0.05,]
```

### ORA

#### Análisis independiente de ambas líneas celulares

LLevamos a cabo un ORA para ver las familias sobrerrepresentadas en los genes sobre e infraexpresados

Cargamos los resultados de DESeq

```{r}
load(paste0(out_path,"/DESeq_res_indpte.obj"))
```

Creamos la lista de gene_ID de interés, en este caso dos: genes sobre e infraexpresados

```{r}
#creamos una función que obtenga los ID de los genes sobre expresados de forma significativa
get_ID_positivos<-function(x){
  res<-na.omit(x)
  res_positivos<-res[res$log2FoldChange>0 & res$padj<0.05,]
  ID_positivos<-rownames(res_positivos)
  return(ID_positivos)
}

#creamos una función que obtenga los ID de los genes infra expresados de forma significativa
get_ID_negativos<-function(x){
  res<-na.omit(x)
  res_negativos<-res[res$log2FoldChange<0 & res$padj<0.05,]
  ID_negativos<-rownames(res_negativos)
  return(ID_negativos)
}

ID_positivos_list<-lapply(res_list_df,get_ID_positivos)
ID_negativos_list<-lapply(res_list_df,get_ID_negativos)
```

creamos el universe, es decir una lista con todos los genes del experimento

```{r}
#creamos una función que genere el universe
get_universe<-function(x){
  universe<-rownames(x)
  return(universe)
}

universe_list<-lapply(res_list_df,get_universe)
```

creamos el term_to_gene a partir del rmsk

```{r}
rmsk <- "/data/genomes/GRCh38_gencode/GRCh38_GENCODE_rmsk_TE.gtf"
rmsk <- import(rmsk, format = "gtf")
term_to_gene <- data.frame(
  term = rmsk$family_id,
  gene_name = paste(rmsk$gene_id, rmsk$family_id, rmsk$class_id, sep = ":")
) %>% unique()
#Term-to-gene agrupado en lista para fgsea
term_to_gene_list <-term_to_gene %>%
  group_by(term) %>%
  nest() %>%
  pull(data,name = term)
term_to_gene_list <- unlist(term_to_gene_list,recursive = F)
```

Ejecutamos la función fora de fgsea y calculamos el enrichment score

```{r}
#creamos una función que ejecute el ORA y calcule el enrichment score, la "x" es el ID de interes y la "y" el universe
get_ORA<-function(x,y){
  ORA<-fora(term_to_gene_list,x,y)
  ORA<-mutate(ORA, enrichment= overlap/((size/length(y))*length(x)))#enrichment
  ORA$pathway<-gsub(".gene_name", "", ORA$pathway, fixed = TRUE)#quitamos el ".gene_name"
  return(ORA)
}

ORA_positivos<-mapply(get_ORA, ID_positivos_list, universe_list, SIMPLIFY = FALSE)
ORA_positivos_signif<-lapply(ORA_positivos,function(x){
  filter(x,padj<0.05)
})

#OTRA FORMA DE HACERLO
#res <- lapply(names(ID_positivos_list), function(i) {
 #get_ORA(ID_positivos_list[[i]], universe_list[[i]])
#})
#names(res)<-names(ID_positivos_list)

ORA_negativos<-mapply(get_ORA,ID_negativos_list,universe_list, SIMPLIFY = FALSE)
ORA_negativos_signif<-lapply(ORA_negativos,function(x){
  filter(x,padj<0.05)
})
```

Representamos los resultados significaticos

```{r}
ORA_negativos_signif_df <- dplyr::bind_rows(ORA_negativos_signif,.id="experiment")
ORA_GM00038<-ggplot(ORA_negativos_signif_df,aes(x=enrichment,y=fct_reorder(pathway,enrichment),fill=padj)) +
  ylab("Familia")+
  geom_bar(stat="identity") +
  scale_fill_gradient(low = "blue", high = "red",name = "P.ajustado") +
  theme(plot.title = element_text(hjust = 0.5),strip.text = element_text(size = 12))+
  facet_wrap(~factor(experiment, c("GM00038_Temprano_vs_Medio","GM00038_Medio_vs_Tardío","GM00038_Temprano_vs_Tardío")))
ORA_GM00038

png(filename = paste0(out_path,"/ORA_GM00038.png"),height = 10000,width = 14000,res = 1100)
ORA_GM00038
dev.off()

ggsave(paste0(out_path,"/ORA_GM00038.pdf"),ORA_GM00038,height = 8,width = 10)
```

#### Análisis conjunto de ambas líneas celulares

Cargamos los resultados

```{r}
load(paste0(out_path,"/DESeq_res_conj.obj"))
res_df<-as.data.frame(res)
```

Generamos la lista de gene_ID de interés a partir del df de los resultados, en este caso dos: genes sobre e infraexpresados

```{r}
ID_positivos_conj<-get_ID_positivos(res_df)
ID_negativos_conj<-get_ID_negativos(res_df)
```

Generamos el universea partir del df de los resultados, es decir una lista con todos los genes del experimento

```{r}
universe_conj<-get_universe(res_df)
```

Ejecutamos la función fora de fgsea y calculamos el enrichment score

```{r}
ORA_positivos_conj<-get_ORA(ID_positivos_conj,universe_conj)
ORA_negativos_conj<-get_ORA(ID_negativos_conj,universe_conj)

ORA_positivos_conj_sig<-ORA_positivos_conj[ORA_positivos_conj$padj<0.05,]
ORA_negativos_conj_sig<-ORA_negativos_conj[ORA_negativos_conj$padj<0.05,]
```

Representamos los resultados significaticos

```{r}
ORA_conj<-ggplot(ORA_negativos_conj_sig,aes(x=enrichment,y=fct_reorder(pathway,enrichment),fill=padj)) +
  ylab("FAMILIAS")+
  xlab("ENRIQUECIMIENTO")+
  geom_bar(stat="identity") +
  scale_fill_gradient(low = "blue", high = "red",name = "P.ajustado") +
  theme(axis.title = element_text(size=16,face = "bold"),legend.title = element_text(size=15),axis.text = element_text(size=12,face = "bold"),legend.text = element_text(size=12))

ORA_conj

png(filename = paste0(out_path,"/ORA_conj.png"),height = 6000,width = 7000,res = 1100)
ORA_conj
dev.off()

ggsave(paste0(out_path,"/ORA_conj.pdf"),ORA_conj)
```

Verificamos los resultados comprobando la expresión del marcador de senescencia p21 (CDKN1A)

```{r}
p21<-plotCounts(DESeq,gene = "ENSG00000124762.14",intgroup = c("Pase","Células"),returnData = T)
p21_plot<-ggplot(p21,aes(x=Pase,y=count))+
  geom_point(aes(color=Células),size=3)+
  ylab("Lecturas normalizadas")+
  theme(plot.title = element_text(hjust = 0.5))+
  ggtitle("EXPRESIÓN p21")
p21_plot
png(filename = paste0(out_path,"/p21_expr.png"),height = 6000,width = 8000,res = 1100)
p21_plot
dev.off()
```

## Análisis a nivel de locus

definimos las variables que utilizaremos más adelante

```{r}
counts_path_loci<- Sys.glob(paste("~/data/transposones/fibrob_senescentes/TElocal/results", "/*cntTable", sep = ""))
suppressPackageStartupMessages(library(DESeq2))
loc_TE<-read.delim("/data/genomes/GRCh38_gencode/GRCh38_GENCODE_rmsk_TE.gtf.locInd.locations")
loc_TE <- separate(loc_TE, chromsome.start.stop.strand, into = c("chromosome","start-stop", "strand"), sep = ":", remove = T )
```

generamos los input de la función DESeqDataSetFromMatrix

```{r}
#Fusionamos los archivos de count de todas las muestras
countData_loci<-read_delim(counts_path_loci, id = "sample", col_names = F, skip = 1,show_col_types = F)
countData_loci<-pivot_wider(countData_loci,names_from = sample, values_from = X2)
colnames(countData_loci)<-c("gene_id", basename(colnames(countData_loci[2:19])))
countData_loci<-data.frame(countData_loci, row.names = 1)

#Separamos los counts en función de la línea celular
countData_GM05565_loci<-countData_loci[,c(2,11:18)]
countData_GM00038_loci<-countData_loci[,c(1,3:10)]

#generamos el coldata de cada una de las líneas celulares
sample_info<-read.xlsx("~/data/transposones/fibrob_senescentes/TEtranscripts/DESeq_fib_senescentes/sample_info.xlsx")
colData_GM05565<-data.frame(sample_info[1:9,3],row.names = colnames(countData_GM05565))
colnames(colData_GM05565)<-"Pase"
colData_GM00038<-data.frame(sample_info[19:27,3], row.names = colnames(countData_GM00038))
colnames(colData_GM00038)<-"Pase"
colData_GM05565$Pase<-factor(colData_GM05565$Pase)
colData_GM00038$Pase<-factor(colData_GM00038$Pase)
```

generamos el DESeqDataSet

```{r}
DESeqDataSet_GM05565_loci<-DESeqDataSetFromMatrix(countData = countData_GM05565_loci, colData = colData_GM05565, design = ~ Pase)
DESeqDataSet_GM00038_loci<-DESeqDataSetFromMatrix(countData = countData_GM00038_loci, colData = colData_GM00038, design = ~ Pase)
```

Eliminamos los loci con pocas lecturas

```{r}
smallestGroupSize <- 3

keep_GM05565_loci <- rowSums(counts(DESeqDataSet_GM05565_loci) >= 10) >= smallestGroupSize
DESeqDataSet_GM05565_loci <- DESeqDataSet_GM05565_loci[keep_GM05565_loci,]
keep_GM00038_loci <- rowSums(counts(DESeqDataSet_GM00038_loci) >= 10) >= smallestGroupSize
DESeqDataSet_GM00038_loci <- DESeqDataSet_GM00038_loci[keep_GM00038_loci,]
```

Ejecutamos la función DESeq

```{r}
DESeq_GM05565_loci<-DESeq(DESeqDataSet_GM05565_loci)
DESeq_GM00038_loci<-DESeq(DESeqDataSet_GM00038_loci)
```

Visualizamos las diferencias de expresión a nivel general mediante un PCA y una matriz de distancias

```{r}
vsd_GM05565_loci <- vst(DESeq_GM05565_loci, blind=FALSE)
vsd_GM00038_loci<- vst(DESeq_GM00038_loci, blind = FALSE)

plotPCA(vsd_GM05565_loci, intgroup=("Pase")) + labs(title="PCA GM05565 loci", colour = "Pase")
plotPCA(vsd_GM00038_loci, intgroup=("Pase")) + labs(title="PCA GM00038 loci", colour = "Pase")


#creamos la matriz de distancias
sampleDists_GM05565_loci <- dist(t(assay(vsd_GM05565_loci)))
sampleDistMatrix_GM05565_loci <- as.matrix(sampleDists_GM05565_loci)
rownames(sampleDistMatrix_GM05565_loci) <- vsd_GM05565_loci$Pase
colnames(sampleDistMatrix_GM05565_loci) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix_GM05565_loci,
         clustering_distance_rows=sampleDists_GM05565_loci,
         clustering_distance_cols=sampleDists_GM05565_loci,
         col=colors, main = "Matriz de distancias GM05565 loci") 

sampleDists_GM00038_loci <- dist(t(assay(vsd_GM00038_loci)))
sampleDistMatrix_GM00038_loci <- as.matrix(sampleDists_GM00038_loci)
rownames(sampleDistMatrix_GM00038_loci) <- vsd_GM00038_loci$Pase
colnames(sampleDistMatrix_GM00038_loci) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix_GM00038_loci,
         clustering_distance_rows=sampleDists_GM00038_loci,
         clustering_distance_cols=sampleDists_GM00038_loci,
         col=colors, main = "Matriz de distancias GM00038 loci")
```

Ejecutamos los análisis comparativos

```{r}
res_GM05565_TempranovsMedio_loci<-results(DESeq_GM05565_loci, contrast = c("Pase","Medio","Temprano"))
res_GM05565_MediovsTardío_loci<-results(DESeq_GM05565_loci, contrast = c("Pase","Tardío","Medio"))
res_GM05565_TempranovsTardío_loci<-results(DESeq_GM05565_loci, contrast = c("Pase","Tardío","Temprano"))

res_GM00038_TempranovsMedio_loci<-results(DESeq_GM00038_loci, contrast = c("Pase","Medio","Temprano"))
res_GM00038_MediovsTardío_loci<-results(DESeq_GM00038_loci, contrast = c("Pase","Tardío","Medio"))
res_GM00038_TempranovsTardío_loci<-results(DESeq_GM00038_loci, contrast = c("Pase","Tardío","Temprano"))
```

Guardamos los resultados como csv2 y como objeto

```{r}
res_list_loci<-list(GM05565_Temprano_vs_Medio_loci=res_GM05565_TempranovsMedio_loci,GM05565_Medio_vs_Tardío_loci=res_GM05565_MediovsTardío_loci,GM05565_Temprano_vs_Tardío_loci=res_GM05565_TempranovsTardío_loci,GM00038_Temprano_vs_Medio_loci=res_GM00038_TempranovsMedio_loci,GM00038_Medio_vs_Tardío_loci=res_GM00038_MediovsTardío_loci,GM00038_Temprano_vs_Tardío_loci=res_GM00038_TempranovsTardío_loci)
res_list_df_loci<-lapply(res_list_loci,as.data.frame)
res_indpt_loci<-bind_rows(res_list_df_loci,.id = "experiment")

write.csv2(res_indpt_loci, paste0(out_path,"/DESeq_res_indpte_loci.csv"),quote = F)
save(res_list_df_loci,file = paste0(out_path,"/DESeq_res_indpte_loci.obj"))
```

Nos quedamos con los transposones en cada uno de los experimentos

```{r}
TE_list_loci<-lapply(res_list_loci,get_TE)
```

Análisis general de los resultados, comparando la expresión general con la de los transposones

```{r}
for (i in 1:6){
  print(names(res_list_loci[i]))
  print(summary(res_list_loci[[i]]))
  print(names(TE_list_loci[i]))
  print(summary(TE_list_loci[[i]]))
}
```

Volcano Plots de los transposones de los cromosomas x e y

```{r,fig.height=10,fig.width=10}
#añadimos la información de la localización
TE_list_located<-lapply(TE_list_loci, as.data.frame)
TE_list_located<-lapply(TE_list_located,tibble::rownames_to_column, var = "names")
TE_list_located<-lapply(TE_list_located,separate, col="names", into = c("TE","subfamily","family","type"), sep=":")
TE_list_located<-lapply(TE_list_located,left_join, y=loc_TE[,1:2])

#seleccionamos los transposones de los cromosomas x e y
TE_list_sexual<-lapply(TE_list_located, filter, chromosome == "chrX" | chromosome == "chrY")

TE_squared_sexual<-list()
for (i in TE_list_sexual){
  TE<-as.data.frame(i)%>%
  mutate(log2FoldChange,aa = square_data(log2FoldChange,4,T)) %>%
  mutate(padj,padj = square_data(padj,1e-25,F))
  TE_squared_sexual<-append(TE_squared_sexual, list(TE))
}
names(TE_squared_sexual)<-names(TE_list_sexual)
TE_squared_sexual<-bind_rows(TE_squared_sexual, .id="experiment")


EnhancedVolcano(TE_squared_sexual,x="log2FoldChange",y="padj",lab=TE_squared_sexual$TE,title="Volcano plots loci chrX y ChrY", ylab=bquote(~-Log[10] ~ italic(Padj)),subtitle = NULL,FCcutoff = 1,pCutoff=10e-2, labSize = 3, xlim = c(-4,4),ylim=c(0,25),boxedLabels = TRUE,drawConnectors = TRUE,min.segment.length = 0,legendLabels = c("NS", expression(Log[2] ~ FC), "p-valor", expression(p - valor ~ y ~ log[2] ~ FC)), captionLabSize = 14, legendLabSize = 14)+facet_wrap(~factor(experiment, c("GM05565_Temprano_vs_Medio_loci","GM05565_Medio_vs_Tardío_loci","GM05565_Temprano_vs_Tardío_loci","GM00038_Temprano_vs_Medio_loci","GM00038_Medio_vs_Tardío_loci","GM00038_Temprano_vs_Tardío_loci")))+theme(strip.text.x = element_text(size = 14))
```

```{r,fig.height=10, fig.width=10}
TE_squared_loci<-list()
for (i in TE_list_loci){
  TE<-as.data.frame(i)%>%
  mutate(log2FoldChange,aa = square_data(log2FoldChange,4,T)) %>%
  mutate(padj,padj = square_data(padj,1e-25,F))
  TE_squared_loci<-append(TE_squared_loci, list(TE))
}
names(TE_squared_loci)<-names(TE_list_loci)
TE_squared_loci<-bind_rows(TE_squared_loci, .id="experiment")


EnhancedVolcano(TE_squared_loci,x="log2FoldChange",y="padj",lab=rownames(TE_squared_loci),title="Volcano plots loci", ylab=bquote(~-Log[10] ~ italic(Padj)),subtitle = NULL,FCcutoff = 1,pCutoff=10e-2, labSize = 3, xlim = c(-4,4),ylim=c(0,25),boxedLabels = TRUE,drawConnectors = TRUE,min.segment.length = 0,legendLabels = c("NS", expression(Log[2] ~ FC), "p-valor", expression(p - valor ~ y ~ log[2] ~ FC)), captionLabSize = 14, legendLabSize = 14)+facet_wrap(~factor(experiment, c("GM05565_Temprano_vs_Medio_loci","GM05565_Medio_vs_Tardío_loci","GM05565_Temprano_vs_Tardío_loci","GM00038_Temprano_vs_Medio_loci","GM00038_Medio_vs_Tardío_loci","GM00038_Temprano_vs_Tardío_loci")))+theme(strip.text.x = element_text(size = 14))
```

```{r,fig.height=10, fig.width=10}
EnhancedVolcano(TE_squared_loci[TE_squared_loci$baseMean>10,],x="log2FoldChange",y="padj",title="Volcano plots loci",lab = rownames(TE_squared_loci[TE_squared_loci$baseMean>10,]), ylab=bquote(~-Log[10] ~ italic(Padj)),subtitle = NULL,FCcutoff = 1,pCutoff=10e-2, labSize = 3, xlim = c(-4,4),ylim=c(0,25),boxedLabels = TRUE,drawConnectors = TRUE,min.segment.length = 0,legendLabels = c("NS", expression(Log[2] ~ FC), "p-valor", expression(p - valor ~ y ~ log[2] ~ FC)), captionLabSize = 14, legendLabSize = 14)+facet_wrap(~factor(experiment, c("GM05565_Temprano_vs_Medio_loci","GM05565_Medio_vs_Tardío_loci","GM05565_Temprano_vs_Tardío_loci","GM00038_Temprano_vs_Medio_loci","GM00038_Medio_vs_Tardío_loci","GM00038_Temprano_vs_Tardío_loci")))+theme(strip.text.x = element_text(size = 14))
```

```{r}

TE_squared_located<-list()
for (i in TE_list_located){
  TE<-as.data.frame(i)%>%
  mutate(log2FoldChange,aa = square_data(log2FoldChange,4,T)) %>%
  mutate(padj,padj = square_data(padj,1e-25,F))
  TE_squared_located<-append(TE_squared_located, list(TE))
}
names(TE_squared_located)<-names(TE_list_located)
TE_squared_located<-bind_rows(TE_squared_located, .id="experiment")
TE_squared_located<-TE_squared_located[TE_squared_located$baseMean>10,]


TE_Y<-TE_squared_located[TE_squared_located$chromosome=="chrY",]
TE_X<-TE_squared_located[TE_squared_located$chromosome=="chrX",]


ggplot(data = TE_squared_located, # Original data  
       aes(x = log2FoldChange, y = -log10(padj))) + 
  geom_point(colour = "grey", alpha = 0.5) +
  geom_point(data = TE_Y, # New layer containing data subset il_genes       
             size = 2,
             shape = 21,
             fill = "firebrick",
             colour = "black") +
  facet_wrap(~factor(experiment, c("GM05565_Temprano_vs_Medio_loci","GM05565_Medio_vs_Tardío_loci","GM05565_Temprano_vs_Tardío_loci","GM00038_Temprano_vs_Medio_loci","GM00038_Medio_vs_Tardío_loci","GM00038_Temprano_vs_Tardío_loci")))

ggplot(data = TE_squared_located, # Original data  
       aes(x = log2FoldChange, y = -log10(padj))) + 
  geom_point(colour = "grey", alpha = 0.5) +
  geom_point(data = TE_X, # New layer containing data subset il_genes       
             size = 2,
             shape = 21,
             fill = "firebrick",
             colour = "black") +
  facet_wrap(~factor(experiment, c("GM05565_Temprano_vs_Medio_loci","GM05565_Medio_vs_Tardío_loci","GM05565_Temprano_vs_Tardío_loci","GM00038_Temprano_vs_Medio_loci","GM00038_Medio_vs_Tardío_loci","GM00038_Temprano_vs_Tardío_loci")))

```
